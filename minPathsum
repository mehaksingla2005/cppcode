//Memoiazation

class Solution {
private:
    int minPathSumUtil(vector<vector<int>>& grid,vector<vector<int>>& dp,int i,int j){
        if(i==0 && j==0)return grid[0][0];
        if(i<0 || j<0)return INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];
        int left=minPathSumUtil(grid,dp,i,j-1);
        int up=minPathSumUtil(grid,dp,i-1,j);
    
        if (left != INT_MAX) left += grid[i][j];
        if (up != INT_MAX) up += grid[i][j];
        return dp[i][j]=min(left,up);

    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return minPathSumUtil(grid,dp,n-1,m-1);
    }
};

//tabulation

class Solution {
private:
    int minPathSumUtil(vector<vector<int>>& grid,vector<vector<int>>& dp,int i,int j){
        if(i==0 && j==0)return grid[0][0];
        if(i<0 || j<0)return INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];
        int left=minPathSumUtil(grid,dp,i,j-1);
        int up=minPathSumUtil(grid,dp,i-1,j);
    
        if (left != INT_MAX) left += grid[i][j];
        if (up != INT_MAX) up += grid[i][j];
        return dp[i][j]=min(left,up);

    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0)dp[i][j]=grid[i][j];
                else{
                    int up=grid[i][j];
                    if(i>0)up+=dp[i-1][j];
                    else up+=1e9;
                    int left=grid[i][j];
                    if(j>0)left+=dp[i][j-1];
                    else left+=1e9;
                    dp[i][j]=min(up,left);
                }
            }
        }
        return dp[n-1][m-1];
    }
};



//space Optimisation
class Solution {
private:
    int minPathSumUtil(vector<vector<int>>& grid,vector<vector<int>>& dp,int i,int j){
        if(i==0 && j==0)return grid[0][0];
        if(i<0 || j<0)return INT_MAX;
        if(dp[i][j]!=-1)return dp[i][j];
        int left=minPathSumUtil(grid,dp,i,j-1);
        int up=minPathSumUtil(grid,dp,i-1,j);
    
        if (left != INT_MAX) left += grid[i][j];
        if (up != INT_MAX) up += grid[i][j];
        return dp[i][j]=min(left,up);

    }
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<int> prev(n,0);
        for(int i=0;i<n;i++){
            vector<int> temp(m,0);
            for(int j=0;j<m;j++){
                if(i==0 && j==0)temp[j]=grid[i][j];
                else{
                    int up=grid[i][j];
                    if(i>0)up+=prev[j];
                    else up+=1e9;
                    int left=grid[i][j];
                    if(j>0)left+=temp[j-1];
                    else left+=1e9;
                    temp[j]=min(up,left);
                }
            }
            prev=temp;
        }
        return prev[m-1];
    }
};
